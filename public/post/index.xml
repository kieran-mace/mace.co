<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Mutual Information</title>
    <link>/post/</link>
    <description>Recent content in Posts on Mutual Information</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Mar 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>HTS Challenge</title>
      <link>/2018/03/15/hts-challenge/</link>
      <pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/03/15/hts-challenge/</guid>
      <description>Challenge:  Try to pick out strains you’d promote to the next round of screening.
 This is meant to be an interactive sport, email with any questions.  Data: Data are 60 96-well plates are filled with:
88 possibly improved strains (Standard Well), 4 process controls (Process Control), and 4 parent strains (Parent Strain) from which the Standard Well strains derive.   The 60 plates are processed and measured on 3 different robots: Bender, Terminator, and C3P0.</description>
    </item>
    
    <item>
      <title>Africas GDP over time</title>
      <link>/2018/02/20/africas-gdp-over-time/</link>
      <pubDate>Tue, 20 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/02/20/africas-gdp-over-time/</guid>
      <description>library(countrycode) library(WDI) library(magick) library(tidyverse) library(ggmap) library(maps) library(mapdata) library(magrittr) library(gganimate) library(viridis) Getting the contries in Africa We also need to fix some of the names slightly
countries = countrycode::codelist_panel africa_countries = countries %&amp;gt;% filter(continent == &amp;#39;Africa&amp;#39;) %&amp;gt;% select(country.name.en, iso2c) %&amp;gt;% unique.data.frame() %&amp;gt;% rename(Country_Name = country.name.en, Country_Code = iso2c) %&amp;gt;% mutate(Country_Name = if_else(Country_Name == &amp;quot;Congo - Brazzaville&amp;quot;, &amp;#39;Republic of the Congo&amp;#39;, Country_Name), Country_Name = if_else(Country_Name == &amp;quot;Congo - Kinshasa&amp;quot;,&amp;#39;Democratic Republic of the Congo&amp;#39;, Country_Name), Country_Name = if_else(Country_Name == &amp;quot;Côte d’Ivoire&amp;quot;,&amp;#39;Ivory Coast&amp;#39;, Country_Name), Country_Name = if_else(Country_Name == &amp;quot;Réunion&amp;quot;,&amp;#39;Reunion&amp;#39;, Country_Name), Country_Name = if_else(Country_Name == &amp;quot;St.</description>
    </item>
    
    <item>
      <title>Determining How long it will take to get your EAD from USCIS</title>
      <link>/2018/02/13/determining-how-long-it-will-take-to-get-your-ead-from-uscis/</link>
      <pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/02/13/determining-how-long-it-will-take-to-get-your-ead-from-uscis/</guid>
      <description>Scraping data off the USCIS website I found some code online (https://github.com/co89757/USCISCasePoll/blob/master/poll_uscis.py) to scrape the USCIS website for status updates. I used it to collect the case status for every 10th case between last October and today.
from pyquery import PyQuery as pq import requests import smtplib import os import sys import os.path import re import pandas as pd import feather STATUS_OK = 0 STATUS_ERROR = -1 FILENAME_LASTSTATUS = os.path.join(sys.path[0], &amp;quot;LAST_STATUS_{0}.</description>
    </item>
    
    <item>
      <title>Exploring Homoscedasticity in Gene Expression</title>
      <link>/2018/02/01/exploring-homoscedasticity-in-gene-expression/</link>
      <pubDate>Thu, 01 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/02/01/exploring-homoscedasticity-in-gene-expression/</guid>
      <description>library(DESeq2) ## Loading required package: S4Vectors ## Loading required package: stats4 ## Loading required package: BiocGenerics ## Loading required package: parallel ## ## Attaching package: &amp;#39;BiocGenerics&amp;#39; ## The following objects are masked from &amp;#39;package:parallel&amp;#39;: ## ## clusterApply, clusterApplyLB, clusterCall, clusterEvalQ, ## clusterExport, clusterMap, parApply, parCapply, parLapply, ## parLapplyLB, parRapply, parSapply, parSapplyLB ## The following objects are masked from &amp;#39;package:stats&amp;#39;: ## ## IQR, mad, sd, var, xtabs ## The following objects are masked from &amp;#39;package:base&amp;#39;: ## ## anyDuplicated, append, as.</description>
    </item>
    
    <item>
      <title>Analysis of War - the card game</title>
      <link>/2017/06/24/analysis-of-war---the-card-game/</link>
      <pubDate>Sat, 24 Jun 2017 21:13:14 -0500</pubDate>
      
      <guid>/2017/06/24/analysis-of-war---the-card-game/</guid>
      <description>Introduciton Have you ever played War? have you ever wondered When will this be over!?
Well I have, and after a weekend of being forced to play with my little cousin, I decided enough is enough. Lets do some simulation and some data analysis to answer some basic questions:
 How long does the average game take? How does the initial hand affect your winning percentage?  How often will I win if I have all the aces?</description>
    </item>
    
    <item>
      <title>A Plain Markdown Post</title>
      <link>/2016/12/30/a-plain-markdown-post/</link>
      <pubDate>Fri, 30 Dec 2016 21:49:57 -0700</pubDate>
      
      <guid>/2016/12/30/a-plain-markdown-post/</guid>
      <description>This is a post written in plain Markdown (*.md) instead of R Markdown (*.Rmd). The major differences are:
 You cannot run any R code in a plain Markdown document, whereas in an R Markdown document, you can embed R code chunks (```{r}); A plain Markdown post is rendered through Blackfriday, and an R Markdown document is compiled by rmarkdown and Pandoc.  There are many differences in syntax between Blackfriday&amp;rsquo;s Markdown and Pandoc&amp;rsquo;s Markdown.</description>
    </item>
    
    <item>
      <title>The Modularity of Kaggle NCAA Predictions</title>
      <link>/2016/04/17/the-modularity-of-kaggle-ncaa-predictions/</link>
      <pubDate>Sun, 17 Apr 2016 21:13:14 -0500</pubDate>
      
      <guid>/2016/04/17/the-modularity-of-kaggle-ncaa-predictions/</guid>
      <description>Setup: We want to look at all the kaggle submissions for 2016. first of all we need to download the data here
 Analysis Now lets run some R! First lets load in the data:
library(dplyr) library(readr) library(stringr) library(ggplot2) library(reshape2) rm(list=ls()) # Get list of all files files &amp;lt;- list.files(path=&amp;#39;predictions/&amp;#39;, pattern=&amp;#39;*.csv&amp;#39;, full.names=T) # Load all files allPredictions &amp;lt;- lapply(files, function(f) read.csv(f, stringsAsFactors = F))  Join all the predicitons, remove bad predictions, and calulate correlation pred = data.</description>
    </item>
    
    <item>
      <title>Lorem Ipsum</title>
      <link>/2015/01/01/lorem-ipsum/</link>
      <pubDate>Thu, 01 Jan 2015 13:09:13 -0600</pubDate>
      
      <guid>/2015/01/01/lorem-ipsum/</guid>
      <description>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</description>
    </item>
    
  </channel>
</rss>